
type Stack = &{ push : Stack
     	      , pop  : +{ more : Stack, stop : 1 } }

Some(x : Stack, y : dual Stack) =
  case x { push : y.push; Some(x,y)
       	 , pop  : x.more; y.pop; case y { more : Some(x,y), stop : wait y; None(x) } }

None(x : Stack) =
  case x { push : new (y : Stack) None(y) in Some(x,y)
       	 , pop  : x.stop; close x }
