
type Bool  = +{ tt : 1, ff : 1 }
type Bools1 = &{ req : +{ tt : Bools2, ff : Bools2 }, done : 1 }
type Bools2 = &{ req : +{ tt : Bools1, ff : Bools1 }, done : 1 }

Generator1(b : Bools1) =
  case b { req : flip { 6 : b.tt; Generator2(b)
       	       	      , 4 : b.ff; Generator2(b) }
	 , done : close b }

Generator2(b : Bools2) =
  case b { req : flip { 6 : b.tt; Generator1(b)
       	       	      , 4 : b.ff; Generator1(b) }
	 , done : close b }

Debias(b : dual Bools1, c : Bool) =
  b.req;
  case b { tt : b.req; case b { tt : Debias(b,c)
       	   	  	      , ff : c.tt; b.done; wait b; close c }
         , ff : b.req; case b { tt : c.ff; b.done; wait b; close c
	      	       	      , ff : Debias(b,c) } }

Main(c : Bool) =
  new (b : Bools1) Generator1(b) in Debias(b,c)