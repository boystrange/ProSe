
type BoolP = ⊕{ ff : 1, tt : 1 }
type BoolC = &{ ff : ⊥, tt : ⊥ }

type BoolStreamC = ⊕{ next : BoolC # BoolStreamC, done : ⊥ }
type BoolStreamP = &{ next : BoolP ⊗ BoolStreamP, done : 1 }

Negate(x : BoolC, y : BoolP) =
  case x {
    ff : y[tt].wait x.close y,
    tt : y[ff].wait x.close y
  }

And(x : BoolC, y : BoolC, z : BoolP) =
  case x {
    ff : wait x.case y {
      ff : wait y.z[ff].close z,
      tt : wait y.z[ff].close z
    },
    tt : wait x.case y {
      ff : wait y.z[ff].close z,
      tt : wait y.z[tt].close z
    }
  }

NegateAll(x : BoolStreamC, y : BoolStreamP) =
  case y {
    next :
      x[next].
      x(u).
      y(v) Negate⟨u,v⟩ in NegateAll⟨x,y⟩,
    done :
      x[done].
      wait x.
      close y
  }

AndAll(x : BoolStreamC, y : BoolStreamC, z : BoolStreamP) =
  case z {
    next :
      x[next].
      y[next].
      x(u).
      y(v).
      z(w) And⟨u,v,w⟩ in AndAll⟨x,y,z⟩,
    done :
      x[done].
      y[done].
      wait x.
      wait y.
      close z
  }
